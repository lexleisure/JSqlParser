/*-
 * #%L
 * JSQLParser library
 * %%
 * Copyright (C) 2004 - 2021 JSQLParser
 * %%
 * Dual licensed under GNU LGPL 2.1 or Apache License 2.0
 * #L%
 */
/* CCJSqlParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. CCJSqlParserTokenManager.java */
package net.sf.jsqlparser.parser;
import net.sf.jsqlparser.parser.feature.*;
import net.sf.jsqlparser.expression.*;
import net.sf.jsqlparser.expression.operators.arithmetic.*;
import net.sf.jsqlparser.expression.operators.conditional.*;
import net.sf.jsqlparser.expression.operators.relational.*;
import net.sf.jsqlparser.schema.*;
import net.sf.jsqlparser.statement.*;
import net.sf.jsqlparser.statement.alter.*;
import net.sf.jsqlparser.statement.alter.sequence.*;
import net.sf.jsqlparser.statement.comment.*;
import net.sf.jsqlparser.statement.create.function.*;
import net.sf.jsqlparser.statement.create.index.*;
import net.sf.jsqlparser.statement.create.procedure.*;
import net.sf.jsqlparser.statement.create.schema.*;
import net.sf.jsqlparser.statement.create.synonym.*;
import net.sf.jsqlparser.statement.create.sequence.*;
import net.sf.jsqlparser.statement.create.table.*;
import net.sf.jsqlparser.statement.create.view.*;
import net.sf.jsqlparser.statement.delete.*;
import net.sf.jsqlparser.statement.drop.*;
import net.sf.jsqlparser.statement.insert.*;
import net.sf.jsqlparser.statement.replace.*;
import net.sf.jsqlparser.statement.execute.*;
import net.sf.jsqlparser.statement.select.*;
import net.sf.jsqlparser.statement.show.*;
import net.sf.jsqlparser.statement.truncate.*;
import net.sf.jsqlparser.statement.update.*;
import net.sf.jsqlparser.statement.upsert.*;
import net.sf.jsqlparser.statement.merge.*;
import net.sf.jsqlparser.statement.values.*;
import net.sf.jsqlparser.statement.grant.*;
import java.util.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class CCJSqlParserTokenManager implements CCJSqlParserConstants {
    public FeatureConfiguration configuration = new FeatureConfiguration();

    public void CommonTokenAction(Token t)
        {
                t.absoluteBegin = getCurrentTokenAbsolutePosition();
                t.absoluteEnd = t.absoluteBegin + t.image.length();
        }

        public int getCurrentTokenAbsolutePosition()
        {
                if (input_stream instanceof SimpleCharStream)
                        return ((SimpleCharStream)input_stream).getAbsoluteTokenBegin();
                return -1;
        }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      case 0:
         if ((active4 & 0x2020400000L) != 0L)
            return 202;
         if ((active1 & 0xe000000000000000L) != 0L || (active2 & 0x3fL) != 0L)
         {
            jjmatchedKind = 262;
            return 111;
         }
         if ((active4 & 0x800000000L) != 0L)
            return 203;
         if ((active4 & 0x10000L) != 0L)
            return 18;
         if ((active3 & 0x7f7e00L) != 0L)
         {
            jjmatchedKind = 262;
            return 183;
         }
         if ((active0 & 0xffbffc800000L) != 0L)
         {
            jjmatchedKind = 262;
            return 85;
         }
         if ((active4 & 0x400000000000L) != 0L)
            return 64;
         if ((active1 & 0x1c0000000L) != 0L)
         {
            jjmatchedKind = 262;
            return 6;
         }
         if ((active4 & 0xc080000L) != 0L)
            return 204;
         if ((active3 & 0x1e000000000000L) != 0L)
         {
            jjmatchedKind = 262;
            return 22;
         }
         if ((active0 & 0xfff9000000000000L) != 0L)
         {
            jjmatchedKind = 262;
            return 120;
         }
         if ((active0 & 0x37e0000L) != 0L || (active1 & 0xfffL) != 0L || (active2 & 0x3fffc0L) != 0L || (active3 & 0xa7f800000L) != 0L)
         {
            jjmatchedKind = 262;
            return 205;
         }
         if ((active1 & 0x40000000000L) != 0L || (active2 & 0xfa00000000000000L) != 0L || (active3 & 0x800005800001ffL) != 0L)
         {
            jjmatchedKind = 262;
            return 156;
         }
         if ((active4 & 0x8000000000L) != 0L)
            return 32;
         if ((active0 & 0x1f7fcL) != 0L || (active1 & 0x1ffffbfe3ffff000L) != 0L || (active2 & 0xfffffc00000L) != 0L || (active3 & 0x41fff000000000L) != 0L || (active4 & 0x3f0000000000000L) != 0L)
         {
            jjmatchedKind = 262;
            return 40;
         }
         if ((active3 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 262;
            return 3;
         }
         if ((active4 & 0xc000300000000L) != 0L)
            return 29;
         if ((active4 & 0x4000200000L) != 0L)
            return 206;
         if ((active2 & 0x1fff00000000000L) != 0L)
         {
            jjmatchedKind = 262;
            return 50;
         }
         return -1;
      case 1:
         if ((active2 & 0xf800000000000000L) != 0L || (active3 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 262;
               jjmatchedPos = 1;
            }
            return 155;
         }
         if ((active2 & 0xcL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 262;
               jjmatchedPos = 1;
            }
            return 115;
         }
         if ((active0 & 0xcff9bfbffdbf37fcL) != 0L || (active1 & 0xffde041cffffffffL) != 0L || (active2 & 0x3ffffffc81801c3L) != 0L || (active3 & 0xfffffffffc7ffeL) != 0L || (active4 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 262;
               jjmatchedPos = 1;
            }
            return 40;
         }
         if ((active2 & 0x30L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 262;
               jjmatchedPos = 1;
            }
            return 110;
         }
         if ((active0 & 0x300000000240c000L) != 0L || (active1 & 0x21fbe200000000L) != 0L || (active2 & 0x37e7fe00L) != 0L || (active3 & 0x30000L) != 0L || (active4 & 0x1c0000000000000L) != 0L)
            return 40;
         if ((active1 & 0x100000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 262;
               jjmatchedPos = 1;
            }
            return 5;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 262;
               jjmatchedPos = 1;
            }
            return 84;
         }
         return -1;
      case 2:
         if ((active0 & 0xe7f9bfbfffaf2374L) != 0L || (active1 & 0xffcf7fd9ffe1fffbL) != 0L || (active2 & 0x7a7fffffec3dfdf3L) != 0L || (active3 & 0xe1ffffbffc7ffeL) != 0L || (active4 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 262;
               jjmatchedPos = 2;
            }
            return 40;
         }
         if ((active2 & 0xcL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 262;
               jjmatchedPos = 2;
            }
            return 114;
         }
         if ((active0 & 0x800000000109488L) != 0L || (active1 & 0x100004001e0004L) != 0L || (active2 & 0x8180000001820000L) != 0L || (active3 & 0x1e000040020001L) != 0L)
            return 40;
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 262;
               jjmatchedPos = 2;
            }
            return 83;
         }
         return -1;
      case 3:
         if ((active2 & 0x4L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 262;
               jjmatchedPos = 3;
            }
            return 113;
         }
         if ((active0 & 0xa679bfbb098f2374L) != 0L || (active1 & 0xf9813fd9ff1dff3aL) != 0L || (active2 & 0x727fdffb6125fc7bL) != 0L || (active3 & 0x9c31ffbfac0f8cL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 262;
               jjmatchedPos = 3;
            }
            return 40;
         }
         if ((active0 & 0x41800004f6200000L) != 0L || (active1 & 0x64e400000e000c1L) != 0L || (active2 & 0x90020048c180180L) != 0L || (active3 & 0x61ce0000507073L) != 0L || (active4 & 0x200000000000000L) != 0L)
            return 40;
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 262;
               jjmatchedPos = 3;
            }
            return 82;
         }
         return -1;
      case 4:
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 262;
               jjmatchedPos = 4;
            }
            return 81;
         }
         if ((active0 & 0xa77917b9a90d0274L) != 0L || (active1 & 0x91813cc9c3992fbaL) != 0L || (active2 & 0x723dcdeb0125fd79L) != 0L || (active3 & 0x9da19dbeac410cL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 262;
               jjmatchedPos = 4;
            }
            return 40;
         }
         if ((active0 & 0xa80200822100L) != 0L || (active1 & 0x680003103c04d000L) != 0L || (active2 & 0x42121060100006L) != 0L || (active3 & 0x106201000e80L) != 0L)
            return 40;
         return -1;
      case 5:
         if ((active0 & 0x204010b100080004L) != 0L || (active1 & 0x108084210211aL) != 0L || (active2 & 0x205080001203010L) != 0L || (active3 & 0x88a04432000c00L) != 0L)
            return 40;
         if ((active0 & 0x87390708a9050270L) != 0L || (active1 & 0xd18034c1b1890ea0L) != 0L || (active2 & 0x7038c5eb0005cd69L) != 0L || (active3 & 0x1501998cac410cL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 262;
               jjmatchedPos = 5;
            }
            return 40;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 262;
               jjmatchedPos = 5;
            }
            return 80;
         }
         return -1;
      case 6:
         if ((active0 & 0x85100400a0010040L) != 0L || (active1 & 0x90003480b1810400L) != 0L || (active2 & 0x3030c4c30004c029L) != 0L || (active3 & 0x4001984ac4804L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 6;
            return 40;
         }
         if ((active0 & 0x400000000000L) != 0L)
            return 79;
         if ((active0 & 0x229032809040230L) != 0L || (active1 & 0x4180004100080aa0L) != 0L || (active2 & 0x4008012800010d40L) != 0L || (active3 & 0x11018008000108L) != 0L)
            return 40;
         return -1;
      case 7:
         if ((active0 & 0x8010040080010040L) != 0L || (active1 & 0x90001480a0010000L) != 0L || (active2 & 0x2020c4c20004c000L) != 0L || (active3 & 0x4000180804800L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 7;
            return 40;
         }
         if ((active0 & 0x500000020000000L) != 0L || (active1 & 0x200011800400L) != 0L || (active2 & 0x1010000100000029L) != 0L || (active3 & 0x18042c0004L) != 0L)
            return 40;
         return -1;
      case 8:
         if ((active0 & 0x8000000080000040L) != 0L || (active1 & 0x108000010000L) != 0L || (active2 & 0x202044c200000000L) != 0L || (active3 & 0x804000L) != 0L)
            return 40;
         if ((active0 & 0x10040000010000L) != 0L || (active1 & 0x90000400a0000000L) != 0L || (active2 & 0x80000004c000L) != 0L || (active3 & 0x4000180000800L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 8;
            return 40;
         }
         return -1;
      case 9:
         if ((active0 & 0x10000L) != 0L || (active1 & 0x90000400a0000000L) != 0L || (active3 & 0x4000180000000L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 9;
            return 40;
         }
         if ((active0 & 0x10040000000000L) != 0L || (active2 & 0x80000004c000L) != 0L || (active3 & 0x800L) != 0L)
            return 40;
         return -1;
      case 10:
         if ((active0 & 0x10000L) != 0L || (active1 & 0x90000400a0000000L) != 0L || (active3 & 0x4000180000000L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 10;
            return 40;
         }
         return -1;
      case 11:
         if ((active1 & 0x9000000020000000L) != 0L || (active3 & 0x4000100000000L) != 0L)
            return 40;
         if ((active0 & 0x10000L) != 0L || (active1 & 0x40080000000L) != 0L || (active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 11;
            return 40;
         }
         return -1;
      case 12:
         if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 12;
            return 40;
         }
         if ((active0 & 0x10000L) != 0L || (active1 & 0x40080000000L) != 0L)
            return 40;
         return -1;
      case 13:
         if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 13;
            return 40;
         }
         return -1;
      case 14:
         if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 14;
            return 40;
         }
         return -1;
      case 15:
         if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 15;
            return 40;
         }
         return -1;
      case 16:
         if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 16;
            return 40;
         }
         return -1;
      case 17:
         if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 17;
            return 40;
         }
         return -1;
      case 18:
         if ((active3 & 0x80000000L) != 0L)
            return 40;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 275;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xc000000L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x30000000000000L);
      case 37:
         return jjStopAtPos(0, 296);
      case 38:
         jjmatchedKind = 292;
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 40:
         return jjStopAtPos(0, 268);
      case 41:
         return jjStopAtPos(0, 269);
      case 42:
         return jjStopAtPos(0, 271);
      case 43:
         return jjStopAtPos(0, 276);
      case 44:
         return jjStopAtPos(0, 38);
      case 45:
         jjmatchedKind = 288;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xc000200000000L);
      case 46:
         return jjStartNfaWithStates_0(0, 272, 18);
      case 47:
         return jjStartNfaWithStates_0(0, 295, 32);
      case 58:
         jjmatchedKind = 274;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1000400000000L);
      case 59:
         return jjStopAtPos(0, 248);
      case 60:
         jjmatchedKind = 278;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x2020000000L);
      case 61:
         return jjStopAtPos(0, 270);
      case 62:
         jjmatchedKind = 277;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x4000000000L);
      case 63:
         jjmatchedKind = 273;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xc0000000L);
      case 64:
         jjmatchedKind = 305;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x10800000L);
      case 91:
         return jjStartNfaWithStates_0(0, 302, 64);
      case 93:
         return jjStopAtPos(0, 303);
      case 94:
         return jjStopAtPos(0, 297);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1f7fcL, 0x0L, 0x0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x37e0000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xffbffc800000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0xfff9000000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfffL, 0x0L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000001fff000L, 0x0L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3e000000L, 0x0L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c0000000L, 0x0L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fbfe00000000L, 0x0L, 0x0L, 0x1c0000000000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000000000000L, 0x0L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18000000000000L, 0x0L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fc0000000000000L, 0x0L, 0x0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe000000000000000L, 0x3fL, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fffc0L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1ffc00000L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffe00000000L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1fff00000000000L, 0x0L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L, 0xfa00000000000000L, 0x800005800001ffL, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7f7e00L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xa7f800000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3f000000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1fc0000000000L, 0x200000000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1e000000000000L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x20000000000000L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x40000000000000L, 0x0L);
      case 123:
         jjmatchedKind = 314;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x340000000000L);
      case 124:
         return jjStartNfaWithStates_0(0, 291, 203);
      case 125:
         return jjStopAtPos(0, 299);
      case 126:
         jjmatchedKind = 280;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x2000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active4 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 289);
         break;
      case 38:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         else if ((active4 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 287);
         break;
      case 42:
         if ((active4 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 281);
         break;
      case 58:
         if ((active4 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 304);
         break;
      case 60:
         if ((active4 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 293);
         break;
      case 61:
         if ((active4 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 290);
         break;
      case 62:
         if ((active4 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 284);
         else if ((active4 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 294);
         else if ((active4 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 306;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 308;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x28000000000000L);
      case 64:
         if ((active4 & 0x800000L) != 0L)
            return jjStopAtPos(1, 279);
         else if ((active4 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 285);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x7c800000L, active1, 0xe0c0000040008000L, active2, 0x100600000041L, active3, 0x2004f000000e00L, active4, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0L, active2, 0x200000000000000L, active3, 0L, active4, 0L);
      case 68:
      case 100:
         if ((active4 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 298);
         return jjMoveStringLiteralDfa2_0(active0, 0x18L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1f9000000060000L, active1, 0x318000000001000L, active2, 0xf83de00800000182L, active3, 0x10000006001L, active4, 0L);
      case 70:
      case 102:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 97, 40);
         else if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1800000L, active3, 0L, active4, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0x800000000L, active2, 0L, active3, 0L, active4, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x780000000L, active1, 0L, active2, 0L, active3, 0x180000001002L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xe00000000180000L, active1, 0xc00000480006000L, active2, 0x4000100000000cL, active3, 0x1e2040000001cL, active4, 0x200000000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L, active4, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c0L, active1, 0x1002000001L, active2, 0x2002000000000L, active3, 0L, active4, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1e000000000000L, active4, 0L);
      case 78:
      case 110:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 117, 40);
         else if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1600L, active1, 0x7bc000000006L, active2, 0x4000000L, active3, 0x80f800000L, active4, 0x1c0000000000000L);
      case 79:
      case 111:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000fb800200000L, active1, 0x10020001001f0000L, active2, 0x18000000027fc30L, active3, 0x40000000020040L, active4, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L, active2, 0x108000000L, active3, 0x30000000L, active4, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x180000000L, active4, 0L);
      case 82:
      case 114:
         if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000300000000000L, active1, 0x3c200000L, active2, 0x7c020000000L, active3, 0x1c0000L, active4, 0L);
      case 83:
      case 115:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0x5000000000008L, active2, 0L, active3, 0x240000000L, active4, 0L);
      case 84:
      case 116:
         if ((active4 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0x80000000000080L, active4, 0x200000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000400001010000L, active1, 0x1c00000L, active2, 0x80040180000L, active3, 0x200000L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0L, active4, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xff0L, active2, 0L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800002000000L, active1, 0L, active2, 0L, active3, 0x400100L, active4, 0L);
      case 124:
         if ((active4 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 286);
         break;
      case 126:
         if ((active4 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 282;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1c0000000000000L);
      case 42:
         if ((active4 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 283);
         break;
      case 62:
         if ((active4 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 307);
         else if ((active4 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 309);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x580000220L, active1, 0x100000004000002L, active2, 0x202000000000L, active3, 0x80000000040080L, active4, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0x800e04L, active4, 0L);
      case 67:
      case 99:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000800000L, active1, 0xc000000038L, active2, 0x400000000c00L, active3, 0L, active4, 0L);
      case 68:
      case 100:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 3, 40);
         else if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 40);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000L, active2, 0x20000010L, active3, 0x10000000L, active4, 0L);
      case 69:
      case 101:
         if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 222, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0x100200000000L, active1, 0x80000000000c0L, active2, 0xc088000000L, active3, 0x1a0000001000L, active4, 0L);
      case 70:
      case 102:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 98, 40);
         else if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x18000001000000L, active1, 0x200000000000000L, active2, 0x800001000000L, active3, 0L, active4, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x20040L, active1, 0x80000000L, active2, 0x41000000000000L, active3, 0x400000000L, active4, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x200000000000000L, active3, 0L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2001000000100L, active2, 0x2030000000000L, active3, 0x40203000020L, active4, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000000000L, active2, 0x1000L, active3, 0L, active4, 0L);
      case 76:
      case 108:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 40);
         else if ((active3 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x60003804000000L, active1, 0xc1a000L, active2, 0x4182000L, active3, 0x1c007184000000L, active4, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000000000L, active1, 0x800000000000000L, active2, 0x80000000000c000L, active3, 0x20000000206048L, active4, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000080000L, active1, 0x1020801000000L, active2, 0x410000000000cL, active3, 0x40200000000100L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000200000000000L, active1, 0x400003a200000L, active2, 0x40000010000L, active3, 0x2L, active4, 0L);
      case 80:
      case 112:
         if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 209, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000002000L, active1, 0x100000200L, active2, 0x2008000000000000L, active3, 0x8400000L, active4, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0L, active4, 0L);
      case 82:
      case 114:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0x400001c4000L, active2, 0xa00000002L, active3, 0x18000000000L, active4, 0L);
      case 83:
      case 115:
         if ((active4 & 0x200000000000L) != 0L)
            return jjStopAtPos(2, 301);
         return jjMoveStringLiteralDfa3_0(active0, 0x780080078000000L, active1, 0x40080000000001L, active2, 0x4010000000000000L, active3, 0x820000000L, active4, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 40);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 145, 40);
         else if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2250104L, active1, 0xe080700000001c00L, active2, 0x20000540000040L, active3, 0x1c00000000001L, active4, 0x200000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0x180000L, active4, 0L);
      case 86:
      case 118:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0x10L, active1, 0x40000000L, active2, 0x1000040020L, active3, 0L, active4, 0L);
      case 87:
      case 119:
         if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x100000000200000L, active3, 0L, active4, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x181L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 40);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 116, 40);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L, active3, 0x180000000L, active4, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x228100000080010L, active1, 0x40000000008L, active2, 0x2004000000244400L, active3, 0x8000010000000L, active4, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x2000002L, active2, 0L, active3, 0x10000200000L, active4, 0x100000000000000L);
      case 67:
      case 99:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000208000000L, active1, 0x6000000001041080L, active2, 0x4e800000000L, active3, 0L, active4, 0L);
      case 68:
      case 100:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 173, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0x200000000000L, active4, 0L);
      case 69:
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 40);
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 40);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 122, 40);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 196, 40);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 198, 40);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 212, 40);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 214, 40);
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 246, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x50000020000100L, active1, 0x80803b0000080410L, active2, 0x201800060001020L, active3, 0x20000000L, active4, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x100000000002L, active3, 0L, active4, 0L);
      case 72:
      case 104:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 40);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 162, 40);
         else if ((active3 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x810000L, active1, 0x80000000L, active2, 0x40000000000000L, active3, 0x1800000000000L, active4, 0x200000000000000L);
      case 73:
      case 105:
         if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 187, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x20024L, active1, 0x800000040000000L, active2, 0x100008010L, active3, 0x1808040008L, active4, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000L, active2, 0x2000000000000L, active3, 0L, active4, 0L);
      case 76:
      case 108:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 40);
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 245, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x8001800800002200L, active1, 0x4000810220L, active2, 0x8080000100000L, active3, 0xe04L, active4, 0L);
      case 77:
      case 109:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x18000000000L, active1, 0x100000L, active2, 0x10000000000L, active3, 0L, active4, 0L);
      case 78:
      case 110:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 113, 40);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 114, 40);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 155, 40);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 204, 40);
         else if ((active3 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 235, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x20100000000L, active1, 0x4000000L, active2, 0L, active3, 0x600080000L, active4, 0xc0000000000000L);
      case 79:
      case 111:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 110, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x40L, active1, 0x800000000L, active2, 0x21000002000L, active3, 0x5800100L, active4, 0L);
      case 80:
      case 112:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 40);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 40);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 197, 40);
         else if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0x4000L, active4, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000L, active4, 0L);
      case 82:
      case 114:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 159, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x400080000000L, active1, 0x8000000800L, active2, 0x10000L, active3, 0x100000000080L, active4, 0L);
      case 83:
      case 115:
         if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 184, 40);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 192, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x240000000000L, active1, 0xc100L, active2, 0x4000000001000000L, active3, 0x4000000000000L, active4, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 40);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 118, 40);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 121, 40);
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 234, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x400080000000000L, active1, 0x2000L, active2, 0x10000200000100L, active3, 0x90000000000000L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000000L, active1, 0x1000038000000L, active2, 0x1020400000000044L, active3, 0x6000000000L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x9L, active3, 0L, active4, 0L);
      case 87:
      case 119:
         if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 193, 40);
         else if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 233, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 154, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0x8000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000000000000L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0L, active4, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000888000000L, active1, 0x2100a00L, active2, 0x8010000000009L, active3, 0L, active4, 0xc0000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2c00L, active3, 0x80080000L, active4, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0x1000000000L, active4, 0L);
      case 69:
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 40);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 40);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 79, 40);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 40);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 40);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 129, 40);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 172, 40);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 177, 40);
         else if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 229;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 236, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x430001040000L, active1, 0x8000002000L, active2, 0x1000044801001000L, active3, 0x14004400000c00L, active4, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10L, active3, 0L, active4, 0L);
      case 71:
      case 103:
         if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 225, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L, active2, 0L, active3, 0x8000804000000L, active4, 0L);
      case 72:
      case 104:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 40);
         else if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8400008000000000L, active1, 0x100040100080000L, active2, 0x400008a200200000L, active3, 0x808000000004L, active4, 0L);
      case 75:
      case 107:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 40);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x1000000000002L, active2, 0x40000L, active3, 0x240008L, active4, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000000L, active1, 0L, active2, 0x204000100000020L, active3, 0L, active4, 0L);
      case 78:
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 40);
         else if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 216, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x30L, active1, 0x40000400L, active2, 0x8000L, active3, 0x100000100L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10004L, active1, 0x10000L, active2, 0L, active3, 0x1210000004000L, active4, 0x100000000000000L);
      case 80:
      case 112:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000030000018L, active2, 0L, active3, 0L, active4, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 40);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 40);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 157, 40);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 158, 40);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 169, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x110000000080040L, active1, 0x8080380800000000L, active2, 0x2030c00000000040L, active3, 0x20000000L, active4, 0L);
      case 83:
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 40);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 40);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 130, 40);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 148, 40);
         break;
      case 84:
      case 116:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 40);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 40);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 123, 40);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 164, 40);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 182, 40);
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 199, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x40140000000000L, active1, 0x1800100L, active2, 0L, active3, 0x10000000L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0x40000000a0L, active2, 0L, active3, 0x80000002800000L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x100L, active3, 0x8000000L, active4, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 88:
      case 120:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1000000004000L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000200L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L);
      case 65:
      case 97:
         if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 185, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000000L, active2, 0x2000000000000140L, active3, 0x1080080008L, active4, 0L);
      case 67:
      case 99:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 171, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000020080000010L, active1, 0x800L, active2, 0x8000000000000L, active3, 0L, active4, 0L);
      case 68:
      case 100:
         if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 226, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0x4000000420L, active2, 0x44000000000L, active3, 0L, active4, 0L);
      case 69:
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 40);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 40);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 40);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 40);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 40);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 40);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 40);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 178, 40);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 217, 40);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 220, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000040000L, active1, 0x4000000000800000L, active2, 0x800000010020L, active3, 0L, active4, 0L);
      case 71:
      case 103:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 94, 40);
         else if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 243, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000080000L, active2, 0L, active3, 0x4000000L, active4, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0L, active2, 0x400L, active3, 0L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000040L, active1, 0x8000000011000200L, active2, 0x10000100040000L, active3, 0x240000L, active4, 0L);
      case 75:
      case 107:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 141, 40);
         break;
      case 76:
      case 108:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 40);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 112, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x208000000000000L, active1, 0L, active2, 0x809L, active3, 0L, active4, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 78:
      case 110:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 2, 40);
         else if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 239, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x400412000000000L, active1, 0x100000100000000L, active2, 0x1020002800000000L, active3, 0x8800800004L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0x108000000L, active4, 0x100000000000000L);
      case 80:
      case 112:
         if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 140, 40);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 176, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0L, active4, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000000000000L);
      case 82:
      case 114:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x11040001010000L, active1, 0x1000000000000000L, active2, 0x10000000000L, active3, 0x4000000004000L, active4, 0L);
      case 83:
      case 115:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 40);
         else if ((active3 & 0x400L) != 0L)
         {
            jjmatchedKind = 202;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 230, 40);
         else if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 247, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x20L, active1, 0x100000000000L, active2, 0x408000000000L, active3, 0x10000000800L, active4, 0L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 40);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 40);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 40);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 107, 40);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 149, 40);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 152, 40);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 221, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0x80L, active2, 0x200000000L, active3, 0L, active4, 0xc0000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000000L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000000L, active2, 0xc000L, active3, 0L, active4, 0L);
      case 87:
      case 119:
         if ((active3 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 237, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0L, active4, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000000000L, active4, 0L);
      case 89:
      case 121:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 40);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 132, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100L, active4, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L, active4, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8010040000000000L, active1, 0x8000200000000000L, active2, 0xc000L, active3, 0x4000L, active4, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0x20000000L, active2, 0x1010000000000000L, active3, 0L, active4, 0L);
      case 68:
      case 100:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 40);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 126, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0x800000L, active4, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 4, 40);
         else if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 40);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 40);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 40);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 40);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 40);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 69, 40);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 40);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 102, 40);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 138, 40);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 139, 40);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 179, 40);
         else if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 232, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0x108000000400L, active2, 0L, active3, 0x804000000L, active4, 0L);
      case 71:
      case 103:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 96, 40);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 120, 40);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 165, 40);
         else if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 231, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4L, active4, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L, active1, 0x1000000000010000L, active2, 0x2040c200000000L, active3, 0x4000000000000L, active4, 0L);
      case 76:
      case 108:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 119, 40);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 134, 40);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 136, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000L, active4, 0x100000000000000L);
      case 77:
      case 109:
         if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 200, 40);
         break;
      case 78:
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 40);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 40);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 83, 40);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 190, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000L, active2, 0x800000000020L, active3, 0x240000L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000L, active2, 0L, active3, 0L, active4, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800L, active4, 0L);
      case 82:
      case 114:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 144, 40);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 195, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0L, active4, 0L);
      case 83:
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 40);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 40);
         break;
      case 84:
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 40);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 40);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 40);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 79);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 40);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 75, 40);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 163, 40);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 219, 40);
         else if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 240, 40);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 244, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000040L, active1, 0L, active2, 0x2000000000000000L, active3, 0x1000080000L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40000000009L, active3, 0L, active4, 0x2c0000000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000L, active2, 0L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 168, 40);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0x4000000000800L, active4, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000L, active2, 0x800000000000L, active3, 0x180000000L, active4, 0L);
      case 68:
      case 100:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 40);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 218, 40);
         else if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 227, 40);
         break;
      case 69:
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 40);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 128, 40);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 131, 40);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 160, 40);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 188, 40);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 211, 40);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 228, 40);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L, active1, 0L, active2, 0L, active3, 0x800000L, active4, 0x300000000000000L);
      case 71:
      case 103:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 92, 40);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 210, 40);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 213, 40);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x40L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0x80000000L, active2, 0L, active3, 0L, active4, 0L);
      case 76:
      case 108:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 109, 40);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000000L, active2, 0xc000L, active3, 0L, active4, 0L);
      case 78:
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 40);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 88, 40);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000010000L, active2, 0x20004000000000L, active3, 0L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000020000000L, active2, 0x2000008200000000L, active3, 0L, active4, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x40000000000L, active3, 0x4000L, active4, 0xc0000000000000L);
      case 83:
      case 115:
         if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 194, 40);
         break;
      case 84:
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 58, 40);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 87, 40);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 133, 40);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 180, 40);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0x40000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x400000000000L, active3, 0L, active4, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0x80000000L, active4, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L, active1, 0L, active2, 0L, active3, 0x100000000L, active4, 0x1c0000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800L, active4, 0L);
      case 68:
      case 100:
         if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 215, 40);
         break;
      case 69:
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 63, 40);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 170, 40);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 174, 40);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x800000000000L, active3, 0L, active4, 0L);
      case 71:
      case 103:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 80, 40);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 166, 40);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 181, 40);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L, active1, 0L, active2, 0L, active3, 0x4000000000000L, active4, 0L);
      case 77:
      case 109:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 6, 40);
         break;
      case 78:
      case 110:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 161, 40);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 167, 40);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L, active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0L, active4, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 40);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 189, 40);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L, active3, 0L, active4, 0x200000000000000L);
      case 84:
      case 116:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 103, 40);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 108, 40);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0xc000L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 206, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4);
      return 9;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0x100000000L, active4, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 52, 40);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 142, 40);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 143, 40);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(9, 146, 40);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(9, 203, 40);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L, active3, 0x4000000000000L, active4, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xc0000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0L, active4, 0L);
      case 83:
      case 115:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 175, 40);
         break;
      case 84:
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 40);
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000000000000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L, active3, active4);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x3c0000000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000000L, active3, 0L, active4, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000000000000000L, active3, 0L, active4, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active3, 0x100000000L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L, active1, 0x80000000L, active3, 0L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000000000L, active3, 0x80000000L, active4, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000000000000000L, active3, 0L, active4, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active3, 0x4000000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L, active3, active4);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L, active3, active4);
      return 11;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 127, 40);
         break;
      case 69:
      case 101:
         if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(11, 224, 40);
         else if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 242, 40);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x200000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000000000L, active3, 0L, active4, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active3, 0L, active4, 0xc0000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x100000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L, active1, 0L, active3, 0L, active4, 0L);
      case 84:
      case 116:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(11, 93, 40);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000000L, active3, 0L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active3, 0x80000000L, active4, 0L);
      case 89:
      case 121:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 124, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L, active3, active4);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L, active3, active4);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0xc0000000000000L);
      case 78:
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(12, 16, 40);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 106, 40);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0x80000000L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x100000000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x200000000000000L);
      case 89:
      case 121:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(12, 95, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L, active3, active4);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, 0L, 0L, active3, active4);
      return 13;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa14_0(active3, 0x80000000L, active4, 0x100000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active3, 0L, active4, 0xc0000000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active3, 0L, active4, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, 0L, 0L, active3, active4);
}
private int jjMoveStringLiteralDfa14_0(long old3, long active3, long old4, long active4){
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(12, 0L, 0L, 0L, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, 0L, 0L, active3, active4);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_0(active3, 0x80000000L, active4, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active3, 0L, active4, 0x200000000000000L);
      case 69:
      case 101:
         if ((active4 & 0x100000000000000L) != 0L)
            return jjStopAtPos(14, 312);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa15_0(active3, 0L, active4, 0xc0000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, 0L, 0L, active3, active4);
}
private int jjMoveStringLiteralDfa15_0(long old3, long active3, long old4, long active4){
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(13, 0L, 0L, 0L, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, 0L, 0L, active3, active4);
      return 15;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa16_0(active3, 0L, active4, 0x200000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa16_0(active3, 0x80000000L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa16_0(active3, 0L, active4, 0xc0000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, 0L, 0L, active3, active4);
}
private int jjMoveStringLiteralDfa16_0(long old3, long active3, long old4, long active4){
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(14, 0L, 0L, 0L, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, 0L, 0L, active3, active4);
      return 16;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa17_0(active3, 0L, active4, 0xc0000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active3, 0x80000000L, active4, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa17_0(active3, 0L, active4, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, 0L, 0L, active3, active4);
}
private int jjMoveStringLiteralDfa17_0(long old3, long active3, long old4, long active4){
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(15, 0L, 0L, 0L, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, 0L, active3, active4);
      return 17;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         return jjMoveStringLiteralDfa18_0(active3, 0L, active4, 0xc0000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active3, 0L, active4, 0x200000000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa18_0(active3, 0x80000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, 0L, active3, active4);
}
private int jjMoveStringLiteralDfa18_0(long old3, long active3, long old4, long active4){
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, 0L, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, 0L, active3, active4);
      return 18;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active3, 0L, active4, 0xc0000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active3, 0L, active4, 0x200000000000000L);
      case 83:
      case 115:
         if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(18, 223, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, 0L, active3, active4);
}
private int jjMoveStringLiteralDfa19_0(long old3, long active3, long old4, long active4){
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, 0L, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, 0L, 0L, active4);
      return 19;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_0(active4, 0xc0000000000000L);
      case 78:
      case 110:
         if ((active4 & 0x200000000000000L) != 0L)
            return jjStopAtPos(19, 313);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa20_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(18, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, 0L, 0L, 0L, active4);
      return 20;
   }
   switch(curChar)
   {
      case 77:
      case 109:
         return jjMoveStringLiteralDfa21_0(active4, 0xc0000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa21_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(19, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, 0L, 0L, 0L, active4);
      return 21;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa22_0(active4, 0xc0000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa22_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, 0L, 0L, active4);
      return 22;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa23_0(active4, 0xc0000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa23_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(21, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, 0L, 0L, 0L, active4);
      return 23;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active4 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 310;
            jjmatchedPos = 23;
         }
         return jjMoveStringLiteralDfa24_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa24_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(22, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, 0L, 0L, 0L, active4);
      return 24;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa25_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa25_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(23, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, 0L, 0L, 0L, active4);
      return 25;
   }
   switch(curChar)
   {
      case 87:
      case 119:
         return jjMoveStringLiteralDfa26_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa26_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(24, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, 0L, 0L, 0L, active4);
      return 26;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa27_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa27_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(25, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, 0L, 0L, 0L, 0L, active4);
      return 27;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa28_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(26, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa28_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(26, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, 0L, 0L, 0L, 0L, active4);
      return 28;
   }
   switch(curChar)
   {
      case 72:
      case 104:
         return jjMoveStringLiteralDfa29_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(27, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa29_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(27, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, 0L, 0L, 0L, 0L, active4);
      return 29;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa30_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(28, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa30_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(28, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, 0L, 0L, 0L, 0L, active4);
      return 30;
   }
   switch(curChar)
   {
      case 81:
      case 113:
         return jjMoveStringLiteralDfa31_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(29, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa31_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(29, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, 0L, 0L, 0L, 0L, active4);
      return 31;
   }
   switch(curChar)
   {
      case 85:
      case 117:
         return jjMoveStringLiteralDfa32_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(30, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa32_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(30, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, 0L, 0L, 0L, 0L, active4);
      return 32;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa33_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(31, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa33_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(31, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, 0L, 0L, 0L, 0L, active4);
      return 33;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa34_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(32, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa34_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(32, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, 0L, 0L, 0L, 0L, active4);
      return 34;
   }
   switch(curChar)
   {
      case 89:
      case 121:
         return jjMoveStringLiteralDfa35_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(33, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa35_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(33, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, 0L, 0L, 0L, 0L, active4);
      return 35;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa36_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(34, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa36_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(34, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, 0L, 0L, 0L, 0L, active4);
      return 36;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa37_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(35, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa37_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(35, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, 0L, 0L, 0L, 0L, active4);
      return 37;
   }
   switch(curChar)
   {
      case 88:
      case 120:
         return jjMoveStringLiteralDfa38_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(36, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa38_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(36, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, 0L, 0L, 0L, 0L, active4);
      return 38;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         return jjMoveStringLiteralDfa39_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(37, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa39_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(37, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, 0L, 0L, 0L, 0L, active4);
      return 39;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa40_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(38, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa40_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(38, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, 0L, 0L, 0L, 0L, active4);
      return 40;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa41_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(39, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa41_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(39, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, 0L, 0L, 0L, 0L, active4);
      return 41;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         return jjMoveStringLiteralDfa42_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(40, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa42_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(40, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, 0L, 0L, 0L, 0L, active4);
      return 42;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa43_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(41, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa43_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(41, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(42, 0L, 0L, 0L, 0L, active4);
      return 43;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa44_0(active4, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(42, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa44_0(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(42, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(43, 0L, 0L, 0L, 0L, active4);
      return 44;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active4 & 0x80000000000000L) != 0L)
            return jjStopAtPos(44, 311);
         break;
      default :
         break;
   }
   return jjStartNfa_0(43, 0L, 0L, 0L, 0L, active4);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec6 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec8 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec10 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec13 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec16 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec18 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec21 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec26 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec27 = {
   0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
};
static final long[] jjbitVec28 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec29 = {
   0x3fffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec30 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec31 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec35 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec36 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec37 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec38 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec39 = {
   0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec40 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec41 = {
   0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec43 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
};
static final long[] jjbitVec44 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec45 = {
   0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
};
static final long[] jjbitVec46 = {
   0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
};
static final long[] jjbitVec47 = {
   0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec48 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
};
static final long[] jjbitVec49 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec50 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec51 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec52 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec53 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec54 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec55 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec56 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL
};
static final long[] jjbitVec57 = {
   0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec58 = {
   0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L
};
static final long[] jjbitVec59 = {
   0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec60 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec61 = {
   0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec62 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 202;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 82:
               case 40:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 256)
                        kind = 256;
                     { jjCheckNAddStates(0, 6); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if ((0x1800000000L & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  else if (curChar == 60)
                     { jjCheckNAddStates(7, 10); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(11, 16); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(58, 59); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 46)
                     { jjCheckNAdd(18); }
                  else if (curChar == 33)
                     { jjCheckNAddTwoStates(12, 13); }
                  else if (curChar == 62)
                     { jjCheckNAddTwoStates(9, 10); }
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 22:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAdd(23); }
                  break;
               case 204:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(12, 13); }
                  else if (curChar == 61)
                  {
                     if (kind > 252)
                        kind = 252;
                  }
                  break;
               case 202:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(167, 168); }
                  else if (curChar == 62)
                  {
                     if (kind > 251)
                        kind = 251;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 250)
                        kind = 250;
                  }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(165, 166); }
                  break;
               case 205:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(11, 16); }
                  break;
               case 85:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 5:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 84:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 155:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 115:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 113:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 110:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 156:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 50:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(11, 16); }
                  break;
               case 81:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 111:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 80:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 6:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 120:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 79:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 3:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 206:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(9, 10); }
                  else if (curChar == 61)
                  {
                     if (kind > 249)
                        kind = 249;
                  }
                  break;
               case 114:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 183:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 83:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 203:
               case 15:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 8:
                  if (curChar == 62)
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 9:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 10:
                  if (curChar == 61 && kind > 249)
                     kind = 249;
                  break;
               case 11:
                  if (curChar == 33)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 12:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 13:
                  if (curChar == 61 && kind > 252)
                     kind = 252;
                  break;
               case 17:
                  if (curChar == 46)
                     { jjCheckNAdd(18); }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 255)
                     kind = 255;
                  { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 20:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(21); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 255)
                     kind = 255;
                  { jjCheckNAdd(21); }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(23, 24); }
                  break;
               case 24:
                  if (curChar == 39 && kind > 258)
                     kind = 258;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 258)
                     kind = 258;
                  jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 28:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 29:
                  if (curChar != 45)
                     break;
                  if (kind > 260)
                     kind = 260;
                  { jjCheckNAdd(30); }
                  break;
               case 30:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 260)
                     kind = 260;
                  { jjCheckNAdd(30); }
                  break;
               case 31:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 33:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 34:
                  if (curChar == 42)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 35:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(36, 34); }
                  break;
               case 36:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(36, 34); }
                  break;
               case 37:
                  if (curChar == 47 && kind > 261)
                     kind = 261;
                  break;
               case 38:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 39:
                  if ((0x1800000000L & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 42:
                  if (curChar == 39)
                     { jjCheckNAddStates(11, 16); }
                  break;
               case 44:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 45:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 46:
                  if (curChar == 39 && kind > 265)
                     kind = 265;
                  break;
               case 47:
                  if (curChar == 39)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 48:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 52:
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 57:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(58, 59); }
                  break;
               case 58:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(58, 59); }
                  break;
               case 59:
                  if (curChar == 34 && kind > 266)
                     kind = 266;
                  break;
               case 61:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjAddStates(26, 27); }
                  break;
               case 64:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 65:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 69:
                  if (curChar == 41 && kind > 207)
                     kind = 207;
                  break;
               case 70:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 124:
                  if (curChar == 40)
                     { jjCheckNAdd(125); }
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(125, 126); }
                  break;
               case 126:
                  if (curChar == 41)
                     { jjCheckNAddTwoStates(127, 128); }
                  break;
               case 127:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(127, 128); }
                  break;
               case 130:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(28, 29); }
                  break;
               case 132:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(30, 31); }
                  break;
               case 148:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(32, 35); }
                  break;
               case 164:
                  if (curChar == 60)
                     { jjCheckNAddStates(7, 10); }
                  break;
               case 165:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(165, 166); }
                  break;
               case 166:
                  if (curChar == 61 && kind > 250)
                     kind = 250;
                  break;
               case 167:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(167, 168); }
                  break;
               case 168:
                  if (curChar == 62 && kind > 251)
                     kind = 251;
                  break;
               case 169:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 256)
                     kind = 256;
                  { jjCheckNAddStates(0, 6); }
                  break;
               case 170:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(170, 17); }
                  break;
               case 171:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(171, 172); }
                  break;
               case 172:
                  if (curChar != 46)
                     break;
                  if (kind > 255)
                     kind = 255;
                  jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 174:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(175); }
                  break;
               case 175:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 255)
                     kind = 255;
                  { jjCheckNAdd(175); }
                  break;
               case 176:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(176, 177); }
                  break;
               case 178:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(179); }
                  break;
               case 179:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 255)
                     kind = 255;
                  { jjCheckNAdd(179); }
                  break;
               case 180:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 256)
                     kind = 256;
                  { jjCheckNAdd(180); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 82:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 64;
                  else if (curChar == 96)
                     { jjCheckNAdd(61); }
                  else if (curChar == 124)
                     { jjAddStates(36, 37); }
                  if ((0x24402400244024L & l) != 0L)
                     { jjCheckNAdd(42); }
                  else if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(38, 41); }
                  else if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(42, 44); }
                  else if ((0x1000000010L & l) != 0L)
                     { jjAddStates(45, 47); }
                  else if ((0x200000002000L & l) != 0L)
                     { jjAddStates(48, 49); }
                  else if ((0x800000008L & l) != 0L)
                     { jjAddStates(50, 52); }
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 55;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 22:
               case 40:
                  if ((0x87fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 205:
                  if ((0x87fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 85:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 5:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(1); }
                  break;
               case 84:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 155:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x100000001000L & l) != 0L)
                  {
                     if (kind > 186)
                        kind = 186;
                  }
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 115:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 113:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 110:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 156:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 160;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 50:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(42); }
                  break;
               case 81:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 111:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 80:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 6:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 120:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 79:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 99;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 89;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 3:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 114:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 183:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 200;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 83:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                     { jjCheckNAdd(40); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 203:
               case 16:
                  if (curChar == 124 && kind > 253)
                     kind = 253;
                  break;
               case 1:
                  if ((0x4000000040000L & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 2:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(1); }
                  break;
               case 4:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 14:
                  if (curChar == 124)
                     { jjAddStates(36, 37); }
                  break;
               case 19:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(53, 54); }
                  break;
               case 23:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(55, 56); }
                  break;
               case 25:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 26:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(27); }
                  break;
               case 27:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 258)
                     kind = 258;
                  { jjCheckNAdd(27); }
                  break;
               case 30:
                  if (kind > 260)
                     kind = 260;
                  jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 33:
                  { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 35:
               case 36:
                  { jjCheckNAddTwoStates(36, 34); }
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 41:
                  if ((0x24402400244024L & l) != 0L)
                     { jjCheckNAdd(42); }
                  break;
               case 43:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 45:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 49:
                  { jjCheckNAddStates(23, 25); }
                  break;
               case 51:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 53:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 58:
                  { jjAddStates(57, 58); }
                  break;
               case 60:
                  if (curChar == 96)
                     { jjCheckNAdd(61); }
                  break;
               case 61:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(61, 62); }
                  break;
               case 62:
                  if (curChar == 96 && kind > 266)
                     kind = 266;
                  break;
               case 63:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
               case 65:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 66:
                  if (curChar == 93 && kind > 266)
                     kind = 266;
                  break;
               case 67:
                  if ((0x800000008L & l) != 0L)
                     { jjAddStates(50, 52); }
                  break;
               case 68:
                  if ((0x1000000010000L & l) == 0L)
                     break;
                  if (kind > 207)
                     kind = 207;
                  { jjCheckNAdd(70); }
                  break;
               case 71:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 72:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 86:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 207)
                     kind = 207;
                  { jjCheckNAdd(70); }
                  break;
               case 87:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(86); }
                  break;
               case 88:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(86); }
                  break;
               case 98:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if ((0x200000002000L & l) != 0L)
                     { jjAddStates(48, 49); }
                  break;
               case 108:
                  if ((0x10000000100L & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 109:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 112:
                  if ((0x2000000020L & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 116:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if ((0x1000000010L & l) != 0L)
                     { jjAddStates(45, 47); }
                  break;
               case 118:
                  if ((0x2000000020L & l) != 0L && kind > 49)
                     kind = 49;
                  break;
               case 119:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(118); }
                  break;
               case 121:
                  if ((0x200000002000000L & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 122:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAddStates(59, 61); }
                  break;
               case 128:
                  if ((0x80000000800000L & l) != 0L)
                     { jjAddStates(62, 63); }
                  break;
               case 129:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(130); }
                  break;
               case 131:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 133:
                  if ((0x2000000020L & l) != 0L && kind > 254)
                     kind = 254;
                  break;
               case 134:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if ((0x400000004000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 138:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 141:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(130); }
                  break;
               case 143:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 149:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(123); }
                  break;
               case 150:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(42, 44); }
                  break;
               case 152:
                  if ((0x1000000010L & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 153:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 157:
                  if ((0x10000000100000L & l) != 0L && kind > 186)
                     kind = 186;
                  break;
               case 158:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if ((0x100000001000L & l) != 0L && kind > 186)
                     kind = 186;
                  break;
               case 163:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 173:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(64, 65); }
                  break;
               case 177:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(66, 67); }
                  break;
               case 181:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(38, 41); }
                  break;
               case 182:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(118); }
                  break;
               case 184:
                  if ((0x1000000010000L & l) != 0L && kind > 49)
                     kind = 49;
                  break;
               case 185:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(123); }
                  break;
               case 193:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAddStates(59, 61); }
                  break;
               case 195:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 197:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 82:
               case 40:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 22:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 205:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 85:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 5:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 84:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 155:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 115:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 113:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 110:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 156:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 50:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 81:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 111:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 80:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 6:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 120:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 79:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 3:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 114:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 183:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 83:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 262)
                     kind = 262;
                  { jjCheckNAdd(40); }
                  break;
               case 30:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 260)
                     kind = 260;
                  jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 33:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 35:
               case 36:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(36, 34); }
                  break;
               case 45:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 49:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 58:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(57, 58); }
                  break;
               case 61:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(26, 27); }
                  break;
               case 64:
               case 65:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 202 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, "\46\46", null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\54", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\73", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\50", "\51", "\75", "\52", "\56", "\77", "\72", "\41", "\53", 
"\76", "\74", "\100\100", "\176", "\176\52", "\41\176", "\41\176\52", "\100\76", 
"\74\100", "\77\174", "\77\46", "\55", "\55\43", "\72\75", "\174", "\46", "\74\74", 
"\76\76", "\57", "\45", "\136", null, "\175", null, null, "\133", "\135", "\72\72", 
"\100", "\55\76", "\55\76\76", "\43\76", "\43\76\76", null, null, null, null, "\173", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   170, 17, 171, 172, 176, 177, 180, 165, 166, 167, 168, 43, 45, 46, 48, 49, 
   46, 34, 35, 37, 43, 45, 46, 48, 49, 46, 61, 62, 130, 139, 132, 136, 
   124, 127, 128, 148, 15, 16, 183, 191, 193, 201, 156, 161, 163, 120, 122, 150, 
   111, 116, 85, 96, 106, 20, 21, 23, 24, 58, 59, 124, 128, 148, 141, 147, 
   174, 175, 178, 179, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec40[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec62[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         CommonTokenAction(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 266 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      if ( !configuration.getAsBoolean(Feature.allowSquareBracketQuotation) && matchedToken.image.charAt(0) == '[' ) {
         matchedToken.image = "[";
         for (int i=0;i<CCJSqlParserConstants.tokenImage.length;i++) {
            if (CCJSqlParserConstants.tokenImage[i].equals("\"[\"")) {
                matchedToken.kind = i;
            }
         }
         input_stream.backup(image.length() - 1);
       }
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CCJSqlParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new RuntimeException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public CCJSqlParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 202; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffffdL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0x7fffffffffff645L, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 0x0L, 0x0L, 
   0x30L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x0L, 0x0L, 
   0x30L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[202];
    private final int[] jjstateSet = new int[2 * 202];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
